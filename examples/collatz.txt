# Solve the collatz conjecture
# On the left, keeps track of the operations
#     0: 3n+1
#     1: n/2
# Reading from right to left, these are the operations that reduce the number to 1
# Reading from left to right, these are the operations that take 1 to the number
# Either way, the string of digits is unique to that particular number.

# States
{I0, I1, HH, 1E, 1O, 2E, 2O, Da, Db, Dc, Dd, Ma, Mb, Mc, Md, Me, Mf, Ra, Rb, Rc, ra, rb, rc, (:, ):}

# Initial state
I0

# Final states
{(:, ):}

# Alphabet
{0, 1, B}

# Blank
B

# Input alphabet
{1}

# Transition function
## State I0: Beginning at start of input (all ones) continue if read 1
<I0, 0, 0, r, ):>
<I0, 1, 1, r, I1>
<I0, B, B, r, ):>
## State I1: Test if number is one (terminate)
<I1, 0, 0, r, ):>
<I1, 1, 1, r, 1E>
<I1, B, B, l, HH>
## State HH: Go back to beginning and halt
<HH, 0, 0, l, ):>
<HH, 1, 1, l, HH>
<HH, B, B, r, (:>
## State 1E: Go to end of line to determine if odd or even
<1E, 0, 0, r, ):>
<1E, 1, 1, r, 1O>
<1E, B, B, l, 2E>
## State 1O: Go to end of line to determine if odd or even
<1O, 0, 0, r, ):>
<1O, 1, 1, r, 1E>
<1O, B, B, l, 2O>
## State 2E: Number is even. Go to the beginning.
<2E, 0, 0, l, ):>
<2E, 1, 1, l, 2E>
<2E, B, B, r, Da>
## State 2O: Number is odd. Go to the beginning.
<2O, 0, 0, l, ):>
<2O, 1, 1, l, 2O>
<2O, B, B, r, Ma>

## SUBPROCESS D: Divide number by 2
## State Da: Mark spot with 0
<Da, 0, 0, r, ):>
<Da, 1, 0, r, Db>
<Da, B, B, l, Ra>
## State Db: Go to end
<Db, 0, 0, r, ):>
<Db, 1, 1, r, Db>
<Db, B, B, l, Dc>
## State Dc: Erase number
<Dc, 0, 0, l, ):>
<Dc, 1, B, l, Dd>
<Dc, B, B, l, ):>
## State Dd: Go back to marked number, and start over (moving mark right)
<Dd, 0, 1, r, Da>
<Dd, 1, 1, l, Dd>
<Dd, B, B, l, ):>

## SUBPROCESS R: Record a 1 for dividing by 2
## State Ra: Go back to first blank
<Ra, 0, 0, l, ):>
<Ra, 1, 1, l, Ra>
<Ra, B, B, l, Rb>
## State Rb: Record a 1
<Rb, 0, 0, l, Rb>
<Rb, 1, 1, l, Rb>
<Rb, B, 1, r, Rc>
## State Rc: Go back to start of number and start ALL over
<Rc, 0, 0, r, Rc>
<Rc, 1, 1, r, Rc>
<Rc, B, B, r, I0>

## SUBPROCESS M: Multiply number by 3 and add 1
## State Ma: Mark spot with 0
<Ma, 0, 0, r, ):>
<Ma, 1, 0, r, Mb>
<Ma, B, B, r, ):>
## State Mb: Go to end and add zero
<Mb, 0, 0, r, Mb>
<Mb, 1, 1, r, Mb>
<Mb, B, 0, r, Mc>
## State Mc: Add another zero
<Mc, 0, 0, r, ):>
<Mc, 1, 1, r, ):>
<Mc, B, 0, l, Md>
## State Md: Go back to the marked character
<Md, 0, 0, l, Md>
<Md, 1, 1, l, Me>
<Md, B, B, l, ):>
## State Me: Continue back to marked character and start over (moving mark right)
<Me, 0, 1, r, Ma>
<Me, 1, 1, l, Me>
<Me, B, B, r, Mf>
## State Mf: Change zeros to ones and add 1
<Mf, 0, 1, r, Mf>
<Mf, 1, 1, r, Mf>
<Mf, B, 1, l, ra>

## SUBPROCESS r: Record a 0 for (3n+1)
## State ra: Go back to first blank
<ra, 0, 0, l, ):>
<ra, 1, 1, l, ra>
<ra, B, B, l, rb>
## State rb: Record a 0
<rb, 0, 0, l, rb>
<rb, 1, 1, l, rb>
<rb, B, 0, r, rc>
## State rc: Go back to start of number (now even); enter even state
<rc, 0, 0, r, rc>
<rc, 1, 1, r, rc>
<rc, B, B, r, Da>

